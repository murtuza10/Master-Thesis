### Code ###
```python
import json
import re

def extract_entities(text):
    entities = {
        "Crops": [],
        "Soil": [],
        "Location": [],
        "Time Statement": []
    }

    # Extract Crops
    crops = ["winter wheat"]
    for crop in crops:
        match = re.search(r'\b' + re.escape(crop) + r'\b', text)
        if match:
            entities["Crops"].append({
                "cropSpecies": {
                    "value": crop,
                    "span": [match.start(), match.end()]
                }
            })

    # Extract Soil
    soil = []
    for word in text.split():
        if word.lower() in ["soil", "boden"]:
            soil.append(word)
    for word in soil:
        match = re.search(r'\b' + re.escape(word) + r'\b', text)
        if match:
            entities["Soil"].append({
                "Soil": {
                    "value": word,
                    "span": [match.start(), match.end()]
                }
            })

    # Extract Location
    location = ["Germany", "Brandenburg", "Uckermark", "Quillow"]
    for loc in location:
        match = re.search(r'\b' + re.escape(loc) + r'\b', text)
        if match:
            if loc == "Germany":
                entities["Location"].append({
                    "country": {
                        "value": loc,
                        "span": [match.start(), match.end()]
                    }
                })
            elif loc == "Brandenburg":
                entities["Location"].append({
                    "region": {
                        "value": loc,
                        "span": [match.start(), match.end()]
                    }
                })
            elif loc == "Uckermark" or loc == "Quillow":
                entities["Location"].append({
                    "region": {
                        "value": loc,
                        "span": [match.start(), match.end()]
                    }
                })

    # Extract Time Statement
    time = ["April", "June", "2019"]
    for t in time:
        match = re.search(r'\b' + re.escape(t) + r'\b', text)
        if match:
            if t == "April":
                entities["Time Statement"].append({
                    "startTime": {
                        "value": t,
                        "span": [match.start(), match.end()]
                    }
                })
            elif t == "June":
                entities["Time Statement"].append({
                    "endTime": {
                        "value": t,
                        "span": [match.start(), match.end()]
                    }
                })
            elif t == "2019":
                entities["Time Statement"].append({
                    "startTime": {
                        "value": t,
                        "span": [match.start(), match.end()]
                    }
                })
                entities["Time Statement"].append({
                    "endTime": {
                        "value": t,
                        "span": [match.start(), match.end()]
                    }
                })

    return entities

### Text ###
text = """
Microclimatic data along a gradient from kettle holes to agricultural fields in the AgroScapeLabs Quillow 2019
Microclimatic data along a gradient from kettle holes to agricultural fields in the AgroScapeLabs Quillow 2019.
Ten kettle holes within six agricultural fields (crop: winter wheat) were selected for monitoring microclimatic conditions around the kettle holes. For this purpose we have established a transect starting from the edge of the kettle holes up to 50 m into the surrounding wheat fields. As a control, transects were established from the field edge into the wheat field. Along these transects microclimatic observation stations were installed at 5 different distances (-1m; 1m; 5m; 20m; 50m). At each point air temperature and air humidity were monitored during the growing season of wheat plants (between April and June 2019) Research domain: Ecology of Agricultural Landscapes
climatic factors, environmental factors, measurement, production location, climate system, ecosystems, opendata, Boden, Bewirtschaftungsgebiete/Schutzgebiete/geregelte Gebiete und Berichterstattungseinheiten, Lebensr√§ume und Biotope, Meteorologisch-geografische Kennwerte, Germany, Brandenburg, Uckermark, Quillow
"""

### Extract Entities ###
entities = extract_entities(text)

### Print Entities ###
print(json.dumps(entities, indent=4))
```

### Output ###
```json
{
    "Crops": [
        {
            "cropSpecies": {
                "value": "winter wheat",
                "span": [135, 151]
            }
        }
    ],
    "Soil": [
        {
            "Soil": {
                "value": "Boden",
                "span": [220, 225]
            }
        }
    ],
    "Location": [
        {
            "country": {
                "value": "Germany",
                "span": [239, 246]
            }
        },
        {
            "region": {
                "value": "Brandenburg",
                "span": [247, 257]
            }
        },
        {
            "region": {
                "value": "Uckermark",
                "span": [258, 266]
            }
        },
        {
            "region": {
                "value": "Quillow",
                "span": [267, 274]
            }
        }
    ],
    "Time Statement": [
        {
            "startTime": {
                "value": "April",
                "span": [173, 179]
            }
        },
        {
            "endTime": {
                "value": "June",
                "span": [182, 187]
            }
        },
        {
            "startTime": {
                "value": "2019",
                "span": [189, 194]
            }
        },
        {
            "endTime": {
                "value": "2019",
                "span": [189, 194]
            }
        }
    ]
}
```