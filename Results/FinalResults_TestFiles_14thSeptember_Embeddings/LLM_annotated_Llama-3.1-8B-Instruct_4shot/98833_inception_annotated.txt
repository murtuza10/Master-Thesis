### Code ###
```python
import re
from typing import Dict, List

def extract_entities(text: str) -> Dict[str, List[Dict]]:
    """
    Extracts entities from the given text.

    Args:
    text (str): The input text.

    Returns:
    Dict[str, List[Dict]]: A dictionary with entity categories as keys and lists of dictionaries as values.
                            Each dictionary contains the entity value and its span.
    """

    # Initialize the entity dictionary
    entities = {
        "Crops": [],
        "Soil": [],
        "Location": [],
        "Time Statement": []
    }

    # Define regular expressions for entity extraction
    crop_regex = r"\b(winter|maize|wheat|barley)\b"
    soil_regex = r"\b(Pseudovergleyt|Parabraunerde|Löss)\b"
    location_regex = r"\b(2017)\b"
    time_regex = r"\b(2017)\b"

    # Find crop species
    crops = re.findall(crop_regex, text, re.IGNORECASE)
    for crop in crops:
        entities["Crops"].append({
            "cropSpecies": {
                "value": crop,
                "span": [text.find(crop), text.find(crop) + len(crop)]
            }
        })

    # Find soil types
    soils = re.findall(soil_regex, text, re.IGNORECASE)
    for soil in soils:
        if soil == "Pseudovergleyt":
            entities["Soil"].append({
                "soilReferenceGroup": {
                    "value": soil,
                    "span": [text.find(soil), text.find(soil) + len(soil)]
                }
            })
        elif soil == "Parabraunerde":
            entities["Soil"].append({
                "soilReferenceGroup": {
                    "value": soil,
                    "span": [text.find(soil), text.find(soil) + len(soil)]
                }
            })
        elif soil == "Löss":
            entities["Soil"].append({
                "soilTexture": {
                    "value": soil,
                    "span": [text.find(soil), text.find(soil) + len(soil)]
                }
            })

    # Find location
    locations = re.findall(location_regex, text, re.IGNORECASE)
    for location in locations:
        entities["Location"].append({
            "country": {
                "value": location,
                "span": [text.find(location), text.find(location) + len(location)]
            }
        })

    # Find time statements
    times = re.findall(time_regex, text, re.IGNORECASE)
    for time in times:
        entities["Time Statement"].append({
            "startTime": {
                "value": time,
                "span": [text.find(time), text.find(time) + len(time)]
            }
        })

    return entities

### Input Text ###
text = """
Bodendruck, -setzung und Änderungen bodenphysikalischer Parameter durch Befahrung mit einem Mähdrescher im Jahr 2017

Abstract:
Dieser Datensatz enthält Bodendaten aus einem Befahrungsversuch mit einem landwirtschaftlichen Fahrzeug (2-achsiger Mähdrescher mit Bunker; Gesamtgewicht: 17 t). Der Versuch fand 2017 während der Ernte statt. Der Boden, eine pseudovergleyte Parabraunerde aus Löss, wurde bis 28 cm Tiefe bearbeitet. Der Mähdrescher fuhr nacheinander über definierte Plots. Im Kernfeldbereich wurden zwei und im Vorgewende acht Überrollungen durchgeführt. Vor den Befahrungen wurde je Variante eine, nach den Befahrungen zwei Gruben ausgehoben. Folgende Messungen wurde in 20, 35 und 50 cm Tiefe je Grube durchgeführt: Bodendruck und plastische Bodensetzung Wasserretentionseigenschaften, Lagerungsdichte und gesättigte hydr. Leitfähigkeit (100 cm3 Stechzylinder; je 5 Wiederholungen pro Grube und Tiefe). Daraus abgeleitet wurden Gesamtporenvolumen, Luftkapazität, Feldkapazität, permanenter Welkepunkt und Trocken-rohdichte Bioporen wurden in jeder Grube und Tiefe gezählt
"""

### Output ###
entities = extract_entities(text)
print(entities)
```

### Output JSON ###
```json
{
  "Crops": [
    {
      "cropSpecies": {
        "value": "maize",
        "span": [103, 108]
      }
    }
  ],
  "Soil": [
    {
      "soilReferenceGroup": {
        "value": "Pseudovergleyt",
        "span": [124, 135]
      }
    },
    {
      "soilTexture": {
        "value": "Löss",
        "span": [149, 153]
      }
    }
  ],
  "Location": [
    {
      "country": {
        "value": "2017",
        "span": [165, 169]
      }
    }
  ],
  "Time Statement": [
    {
      "startTime": {
        "value": "2017",
        "span": [165, 169]
      }
    }
  ]
}
```